% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/matchwith.R
\name{match_with}
\alias{match_with}
\alias{match_with}
\title{Patern Matching for R}
\usage{
match_with(...)
}
\arguments{
\item{...}{The first (actual) argument of ... is trying to match following patterns.}
}
\description{
Only supports those functionalities. Guard is still under consideration, not yet completely implemented.
\itemize{
 \item Constatnt Pattern (like 1, "1", NULL as R's atomic expression)
 \item Cons Pattern (x::xs)
 \item Tuple Pattern with matching symbols (VECSXP is used instead of Tuple)
 \item Wildcard Pattern (., _, otherwise)
 \item Guard clauses (when using one of getGroupMembers("Compare"), `!`, any, all, identical, and isTRUE)
}

There are three Wildcard Symbol, '.', '_', and `otherwise'.
You can use one of them in the bottom part of arguments of 'match_with'.
}
\details{
Just like Hakell's "case of" or OCaml's "match with" but not support guard syntax.
}
\examples{
# Syntax
# f <- function(expr) {
#   match_with(expr
#   , pattern_1 -> res_1
#   , pattern_2 -> res_2
#              ...
#   , pattern_n -> res_n
#   )
# }

fib <- function(n) {
  match_with(n
  , 0 -> 0
  , 1 -> 1
  , . -> fib(n - 1) + fib(n - 2)
  )
}
fib(10)

fizzbuzz <- function(z) {
  match_with(list(z \%\% 3, z \%\% 5)
  , list(0, 0) -> "FizzBuzz"
  , list(0, .) -> "Fizz"
  , list(., 0) -> "Buzz"
  , otherwise  -> as.character(z)
  )
}
sapply(1:30, fizzbuzz)

# compare with Haskell's definition
# https://wiki.haskell.org/Fold
# Note:
# If lst is R's list (VECSXP), `length(lst) == 0` can be replaced with `list()`.
# If lst is R's integer vector (INTSXP), `length(lst) == 0` can be replaced with `integer(0)`.
# If lst is R's numeric vector (REALSXP), `length(lst) == 0` can be replaced with `numeric(0)`.

\dontrun{
foldr <- function(f, init, lst) {
  match_with(lst
  , length(lst) == 0 -> init
  , x::xs            -> f(x, foldr(f, init, xs))
  )
}

foldl <- function(f, init, lst) {
  match_with(lst
  , length(lst) == 0 -> init
  , x::xs            -> foldl(f, f(init, x), xs)
  )
}
foldr(function(x, y) paste0("(", x, "+", y, ")"), "0", as.character(1:13))
foldl(function(x, y) paste0("(", x, "+", y, ")"), "0", as.character(1:13))

len <- function(xs) {
  match_with(xs
  , length(xs) == 0 -> 0
  , y::ys           -> 1 + len(ys)
  )
}
len(c(10, 11, 12))
len(list(10, 11, 12))
}
}
